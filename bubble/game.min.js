;(function(){
  "use strict";
  var Game = function(){

    //棋盘二维数组
    this.board = new Array(15);
    this.currentPlayer = 0;
    this.nextPlayer = 1;

    //初始化
    for (var x = 0; x < 15; x++) {
      this.board[x] = new Array(15);
      for (var y = 0; y < 15; y++) {
        this.board[x][y] = 0;
      }
    }
  };

  Game.prototype.one = function(x, y){
    if(this.board[x][y] === 0){
      this.board[x][y] = this.nextPlayer;
      this.currentPlayer = this.nextPlayer;
      this.nextPlayer = this.currentPlayer == 1 ? 2 : 1;
      return this.currentPlayer;
    } else {
      return 0;
    }
  };

  /*
    @param x 落子坐标
    @param y 落子坐标
    @return 返回黑胜(1),白胜(2),未分输赢(0),和棋(-1)
  */
  Game.prototype.win = function(x, y) {
    var count1 = 0;
    var count2 = 0;
    var count3 = 0;
    var count4 = 0;
    var i, j;
    var player = this.currentPlayer;
    var board = this.board;

    //左右判断
    for (i = x; i >= 0; i--) {
        if (board[i][y] != player) {
          break;
        }
        count1++;
    }
    for (i = x + 1; i < 15; i++) {
        if (board[i][y] != player) {
          break;
        }
        count1++;
    }
    //上下判断
    for (i = y; i >= 0; i--) {
        if (board[x][i] != player) {
          break;
        }
        count2++;
    }
    for (i = y + 1; i < 15; i++) {
        if (board[x][i] != player) {
          break;
        }
        count2++;
    }
    //左上右下判断
    for (i = x, j = y; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j] != player) {
          break;
        }
        count3++;
    }
    for (i = x + 1, j = y + 1; i < 15 && j < 15; i++, j++) {
        if (board[i][j] != player) {
            break;
        }
        count3++;
    }
    //右上左下判断
    for (i = x, j = y; i >= 0 && j < 15; i--, j++) {
        if (board[i][j] != player) {
            break;
        }
        count4++;
    }
    for (i = x + 1, j = y - 1; i < 15 && j >= 0; i++, j--) {
        if (board[i][j] != player) {
            break;
        }
        count4++;
    }

    if (count1 >= 5 || count2 >= 5 || count3 >= 5 || count4 >= 5) {
      //已分输赢
      this.winner = (player === 1) ? 1 : 2;
      return this.winner;
    } else {
      //判断是否和棋
      var notTie = board.reduce(function(a,b){
        return a.concat(b);
      }).some(function(element){
        return element > 0;
      });
      return notTie ? 0 : -1;
    }
  };
  window.Game = Game;
})(window);



;(function(window, canvas){
  "use strict";
  var context = canvas.getContext('2d');

  //画棋盘
  context.beginPath();
  for (var x = 0; x < 15; x++) {
    context.moveTo(15.5, 15.5 + 30 * x);
    context.lineTo(435.5, 15.5 + 30 * x);
    context.moveTo(15.5 + 30 * x, 15.5);
    context.lineTo(15.5 + 30 * x, 435.5);
  }
  context.closePath();
  context.stroke();

  //初始化游戏逻辑
  var game = new window.Game();
  canvas.addEventListener('click', function one(event){
    var e = event || window.event;
    //获得落子坐标
    var x = Math.floor(e.offsetX / 30) - 1;
    var y = Math.floor(e.offsetY / 30) - 1;
    var currentPlayer = game.one(x, y);
    //画棋子
    if(x >= 0 && x < 13 && y >= 0 && y < 13 && currentPlayer > 0){
      var gradient = context.createRadialGradient(43 + x * 30, 43 + y * 30, 14, 43 + x * 30, 43 + y * 30, 0);
      if (currentPlayer === 1) {
          gradient.addColorStop(1, '#ccc');
          gradient.addColorStop(0.1, '#000');
      } else {
          gradient.addColorStop(0.1, '#ccc');
          gradient.addColorStop(1, '#fff');
      }
      context.fillStyle = gradient;
      context.beginPath();
      context.arc(45 + x * 30, 45 + y * 30, 14, 0, Math.PI * 2);
      context.closePath();
      context.fill();

      //判断输赢
      var winner = game.win(x,y);
      if(winner !== 0){
        var resultEle = document.getElementById('result');
        switch(winner){
          case 1: //黑棋胜
            resultEle.innerText = 'The winner is black!';
            break;
          case 2: //白棋胜
            resultEle.innerText = 'The winner is white!';
            break;
          case -1: //和棋
            resultEle.innerText = 'Tie!';
            break;
        }
        canvas.removeEventListener('click', one);
      }
    }
  });
})(window, document.getElementById('canvas'));
